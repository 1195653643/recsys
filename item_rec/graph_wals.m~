function [ U, V, metric ] = graph_wals(train, varargin )

randn('state', 10);
R = train>0;
[M, N] = size(R);
[max_iter, reg_u, reg_i, Su,  Si, alpha] = process_options(varargin, 'max_iter', 10, 'reg_u', 0.01, 'reg_i', 0.01, ...
    'user_sim', sparse(M,M), 'item_sim', sparse(N,N), 'alpha', 10);

W = R * alpha;
Wt = W.';
Rt = R.';
su = sum(
for iter = 1:max_iter
    VtV = V.' * V + reg_u * eye(K);
    U = Optimize(Rt, Wt, U, V, VtV, Su);
    UtU = U.' * U + reg_i * eye(K);
    V = Optimize(R, W, V, U, UtU, Si);
    fprintf('Iteration=%d, loss=%f\n', iter, fast_loss(R, W, U, V));
end
end
function U = Optimize(R, W, U, V, VtV, Su)
[~, M] = size(W);
Vt = V.';
for i = 1 : M
    w = W(:, i);
    r = R(:, i);
    Ind = w>0; 
    if nnz(w) == 0
        Wi = zeros(0);
    else
        Wi = diag(w(Ind));
    end
    sub_V = V(Ind,:);
    VCV = sub_V.' * Wi * sub_V + VtV; 
    Y = Vt * (w .* r + r);
    u = VCV \ Y;
    grad = (U(i,:) - u') * VCV ;
    U(i,:) = u;
end
end


